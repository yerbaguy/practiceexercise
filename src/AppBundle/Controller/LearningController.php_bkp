<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Word;
use AppBundle\Entity\RandEng;
use AppBundle\Entity\RandPl;
use AppBundle\Entity\WordRepository;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;


class LearningController extends Controller
{

    /**
     * @Route("/learning", name="user_learning")
     */
    public function learningAction(Request $request)
    {

        $request = $this->getRequest();

        //var_dump($word = new Word());
        $word = new Word();

    //    $form = $this->createForm(new WordType(), $word);

        //$form1 = $this->createForm(new SubmitButtonType(), $word);

        //$form1 = $this->createFormBuilder($word)
        //        ->add('pulltheword', 'submit')
        //        ->getForm();


        $formBuilderOne = $this->container
                       ->get('form.factory')
                       ->createNamedBuilder('formOne', 'form', NULL, array('validation_groups' => array()))
                       ->add('pulltheword', 'submit');

        $formOne = $formBuilderOne
                ->getForm()
                ->handleRequest($request);


        $formBuilderTwo = $this->container
                ->get('form.factory')
                ->createNamedBuilder('formTwo', 'form', NULL, array('validation_groups' => array()))
                ->add('engWord', 'text')
                ->add('submit', 'submit');

        $formTwo = $formBuilderTwo
                ->getForm()
                ->handleRequest($request);


        $formBuilderThree = $this->container
                         ->get('form.factory')
                         ->createNamedBuilder('formThree', 'form', NULL, array('validation_groups' => array()))
                         ->add('support', 'submit');
        $formThree = $formBuilderThree
                  ->getForm()
                  ->handleRequest($request);


         if ($formOne->isSubmitted() && $formOne->isValid()) {
//             echo "OK";

             //var_dump($data = $request->request->all());
             $data = $request->request->all();
             json_encode($randengword = $data['formOne']['pulltheword']);
             if ($formOne->get('pulltheword')->isClicked()) {
//                 echo "Clicked"."<br>";
                 var_dump($count = $this->countingRows());
                 $random = random_int(1, $count);
//                 echo "Random:".$random."<br>";
                 json_encode($pulltheword = $this->pulltheword($random));
                 echo "pulltheword:".$pulltheword[0]['plWord']."</br>";
                     //$randengtable = $this->ifThereIsAnythingInTheRandEngTable();
                     $randpltable = $this->ifThereIsAnythingInTheRandPlTable();
                     if ($randpltable == null) {
                     //    echo "Yes";
                         //$this->insertRandomEngIntoDb($random);
                         $this->insertRandomPlIntoDb($random);
                     }
                     else
                     {
                     //    echo "No";
                         //$this->updateRandomEngIntoDb($random);
                         $this->updateRandomPlIntoDb($random);
                     }

             }




         }


         if ($formTwo->isSubmitted() && $formTwo->isValid()) {
            $engwordfromdb[0] = isset($engwordfromdb[0]) ? $engwordfromdb[0] : null;
            $random[0] = isset($random[0]) ? $random[0] : null;

             //$request->request->get($word->getEngWord());  

             //var_dump($engWord = $_POST['engWord']);

             //$em = $this->getDoctrine()->getManager();
             //$em->persist($word);
             //$em->flush();
//             echo "Form Two OK";
             //var_dump($postData = $request->request->get('learning'));
             //var_dump($engWord = $postData['engWord']);               

//             if ($formOne->get('pulltheword')->isClicked()) {
//                 echo "Clicked";
//             }
             $data = $request->request->all();
             //$data = $request->request->all();
             //var_dump($randengWord = $data['form']['pulltheword']);
             //var_dump($engWord_typed = $data['formTwo']['engWord']);
             $engWord_typed = $data['formTwo']['engWord'];
             //var_dump($this->takeTheWord($engWord));
              echo $engWord_typed."</br>";
             $engWord = $engWord_typed;
             if (!$engwordfromdb = $this->takeTheWord($engWord))
                 echo "The wanted word wasn't found in the database."."</br>";



             //$engwordfromdb = $this->takeTheWord($engWord);
             //print_r($engwordfromdb);
             json_encode($engwordfromdb = $this->takeTheWord($engWord));
//             echo "Id of the taken word:".$engwordfromdb['0']['id']."</br>";
//             echo "Eng word from db:".$engwordfromdb['0']['engWord']."</br>";       
             //compare the typed word with the ones from db            
             //$random = $this->ifThereIsAnythingInTheRandEngTable();
             $random = $this->ifThereIsAnythingInTheRandPlTable();
             //echo "Random:".$random['0']['randPlWord']."</br>";
             //$random_ = (int)$random;

             //var_dump($engwordfromdb['0']['id']);
             //var_dump($random);




             if ($engwordfromdb['0']['id'] == $random['0']['randPlWord']) {
                 echo "Correct.";
             }
             else
             {
                 echo "Wrong.";
                 //if ($formThree->isSubmitted() && $formThree->isValid()) {
                 //    echo "Support";
                 //}

                 //var_dump($this->supportEng($random));
             }
           }


           if ($formThree->isSubmitted() && $formThree->isValid()) {
           //  echo "asdfasdfasd";
             $random = $this->ifThereIsAnythingInTheRandPlTable();
//             echo "Random:".$random['0']['randPlWord']."</br>";
             $random_ = $random['0']['randPlWord']."</br>";
//             var_dump($this->supportEng($random_));
             $supporteng = $this->supportEng($random_);
             echo "The english required word is:"."</br>";
             echo $supporteng['0']['engWord']."</br>";
           }


        return $this->render('learning/learning.html.twig', array(
   //                    'form' => $form->createView(),
                       'formOne' => $formOne->createView(),
                       'formTwo' => $formTwo->createView(),
                       'formThree' => $formThree->createView()

                       ));

    }


    public function countingRows()
    {
        $repository = $this->getDoctrine()->getRepository('AppBundle:Word');
        return $count = $repository->count();
    }

    public function pullTheWord($random)
    {
        $repository = $this->getDoctrine()->getRepository('AppBundle:Word');
        //return $pull = $repository->pullTheWord($random);
        $pull = $repository->pullTheWord($random);
        return $ppull = $pull->getArrayResult();
    }

    public function ifThereIsAnythingInTheRandEngTable()
    {
        $repository = $this->getDoctrine()->getRepository('AppBundle:RandEng');
        //return $ifanything = $repository->isAnything();
        $ifanything = $repository->isAnything();
        return $ifthereisanything = $ifanything->getArrayResult();
    }

    public function ifThereIsAnythingInTheRandPlTable()
    {
        $repository = $this->getDoctrine()->getRepository('AppBundle:RandPl');
        $ifanything = $repository->isAnything();
        return $ifthereisanything = $ifanything->getArrayResult();
    }

    public function insertRandomEngIntoDb($random)
    {
        $randEng = new RandEng();

        $em = $this->getDoctrine()->getEntityManager();
        $randEng->setEngWord($random);
        $em->persist($randEng);
        $em->flush();

    }

    public function insertRandomPlIntoDb($random)
    {
        $randPl = new RandPl();

        $em = $this->getDoctrine()->getEntityManager();
        $randPl->setRandPlWord($random);
        $em->persist($randPl);
        $em->flush();
    }

    public function updateRandomEngIntoDb($random)
    {


         $em = $this->getDoctrine()->getManager();
         $query = $em->createQuery(
               'UPDATE AppBundle:RandEng u WHERE u.randEngWord = :random'
               //'UPDATE AppBundle:RandEng u WHERE u.randEngWord = :random AND u.id = :1'
               )->setParameter('random', $random);

         return $randengword = $query->getResult();


    }

    public function updateRandomPlIntoDb($random)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery(
              'UPDATE AppBundle:RandPl u WHERE u.randPlWord = :random'
              )->setParameter('random', $random);
        return $randplword = $query->getResult();
    }

    public function takeTheWord($engWord)
    {
        $repository = $this->getDoctrine()->getRepository('AppBundle:Word');
        $taketheword = $repository->takeOut($engWord);
        return $iftakentheword = $taketheword->getArrayResult();
    }

    public function supportEng($random)
    {
        $repository = $this->getDoctrine()->getRepository('AppBundle:Word');
        $supporteng = $repository->supportEng($random);
        return $usesupporteng = $supporteng->getArrayResult();
    }












  //  /**
  //   * @Route("/", name="homepage")
  //   */
  //  public function indexAction(Request $request)
  //  {
  //      // replace this example code with whatever you need
  //      return $this->render('default/index.html.twig', array(
  //          'base_dir' => realpath($this->container->getParameter('kernel.root_dir').'/..').DIRECTORY_SEPARATOR,
  //      ));
  //  }
}
